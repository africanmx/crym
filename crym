#!/bin/bash
##
## Copyright 2020 Luis Pulido Diaz
##
## Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),      ##
## to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,      ##
## and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:              ##
##                                                                                                                                                         ##
## The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.                          ##
##                                                                                                                                                         ##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     ##
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      ##
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS    ##
## IN THE SOFTWARE.
## # next line must be intact
# crym 0.1 .signature.json
# checkordie(){ for i in head tail awk tr fold ; do [[ ! $(command -v $i) ]] && echo "fatal: no $i available" && exit 1; done; }; checkordie;
# crymordiee(){ [[ "$(basename $0)" != crym ]] && echo "fatal: basename must be crym" && exit 1; }; crymordiee;
PROGRAM_NAME=$(head -n 16 $0 | tail -n 1 | awk '{print $2}')
PROGRAM_VERSION=$(head -n 16 $0 | tail -n 1 | awk '{print $3}')
PROGRAM_SIGN=$(head -n 16 $0 | tail -n 1 | awk '{print $4}')
XCMD="$PROGRAM_NAME"
# Requires Openssl
# Uncomment DKEYF and set default key if desired
DKEYF=~/.config/crym/.keys/.spkey.pem
DKEYFP=~/.config/crym/.keys/.ppkey.pem
# Command AUTOINSTALLOPENSSL to not auto install openssl
AUTOINSTALLOPENSSL=1
# Modify the KEYSTRENGTH to your needs
KEYSTRENGTH=1024
# Modify the MAXCHAR, and thus the code, to your needs
MAXCHAR=115
# Comment VERBOSE variable to enhance silence
VERBOSE=1
dcs(){ echo "$@" >&2 && exit 1; }
warn(){ echo "$@" >&2; }
uuid_(){ cat /dev/urandom | tr -dc '0-9a-f' | fold -w 31 | head -n 1 | sed -e 's/\(........\)\(....\)\(...\)\(....\)\(............\)/\1-\2-4\3-\4-\5/'; }
tmpd(){ [[ "$SHELL" =~ rmux ]] && (mkdir -p ~/.tmp && echo ~/.tmp) || echo /tmp; }
helpfn(){
	HELPTXT=$(cat <<EOF


   C R Y p t o M e s s a g e

	a.k.a. $PROGRAM_NAME V.$PROGRAM_VERSION
	  Encrypts short messages using OpenSSL
  Usage:

    $XCMD genkeys
	Generates keys if they are not present already. Keys are needed for use without the -i option.

    Encypting:

    $XCMD <options> [message]
	Encrypts and stores the message in current directory as a .dat file.

	The keys are taken as default
		Options:
			-i [key file]			Key to be used,
			-o [output file or dir]    	Output file or directory to be used. If directory, file will be auto-generated as an UUID.


    Decrypting:

    $XCMD -d [file to decrypt]
       Decrypts the message that is hidden in the file
    $XCMD -i [private key] -d [file to decrypt]
       Decrypts the message that is hidden in the file, using the specified private key


    $XCMD Shows help

EOF
)
	echo "$HELPTXT"
}
loadvariables_(){
	PROGRAM_ROOT=/usr/lib/$PROGRAM_NAME
	NSFW=0
	NOKEY=$([[ ! -f "$DKEYF" ]] && echo 1 || echo 0)
}
genkeys(){
	[[ -f "$DKEYF" ]] && dcs "Error: $DKEYF is present already. Aborted."
	[[ -f "$DKEYFP" ]] && dcs "Error: $DKEYFP is present already. Aborted."
	mkdir -p "$(dirname $DKEYF)"
	openssl genrsa -out "$DKEYF" $KSTRENGTH &>/dev/null
	openssl rsa -in "$DKEYF" -out "$DKEYFP" -outform PEM -pubout &>/dev/null
	[[ -n "$VERBOSE" ]] && echo "Done"
}
installopenssl(){
	[[ ! -x "$(command -v curl)" ]] && return
	echo "We detected that you do not have openssl installed. We will install it for you..."
	[[ -x "$(command -v sleep)" ]] && sleep 2
	curl https://luispulido.com/bins/installopenssl 2>/dev/null | sh
}
encrypt(){
	INKEY="$1"
	OFILE="$2"
	MESSAGE="$3"
	TMPFILE=$(tmpd)/$(uuid_)
	echo "$MESSAGE" > "$TMPFILE"
	openssl rsautl -encrypt -inkey "$INKEY" -pubin -in "$TMPFILE" -out "$OFILE"
	[[ -f "$TMPFILE" ]] && rm "$TMPFILE"
}
decrypt(){
	INKEY="$1"
	INFILE="$2"
	TMPFILE=$(tmpd)/$(uuid_)
	openssl rsautl -decrypt -inkey "$INKEY" -in "$INFILE" -out "$TMPFILE"
	[[ -f "$TMPFILE" ]] && cat "$TMPFILE" && rm "$TMPFILE"
}
run(){
	[[ ! -x "$(command -v openssl)" ]] && ( [[ -n "$AUTOINSTALLOPENSSL" ]] && installopenssl || dcs "This program requires openssl" )
	case "$1" in
		help) helpfn && return;;
		genkeys) genkeys && return;;
		*) ;;
	esac
	loadvariables_
	[[ "$(basename $0)" != "crym" ]] && dcs "basename must be crym"
	while [[ $# -gt 1 ]] ; do
		case "$1" in
			-i) DKEYF="$2"; shift; shift;;
			-d) DECRYPT=1; INFILE="$2"; shift; shift;;
			-o) OUTFILE="$2"; shift; shift;;
			*) shift;;
		esac
	done
	[[ ! -f "$DKEYF" ]] && ( [[ -n "$AUTOGENKEYS" ]] && genkeys || dcs "Warning: Keys not generated yet. Please run crym genkeys first." )
	[[ -z "$OUTFILE" ]] && OUTFILE=.
	[[ -d "$OUTFILE" ]] && OUTFILE="$OUTFILE/$(uuid_).dat"
	[[ ! -d "$(dirname $OUTFILE)" ]] && dcs "Error: Directory $(dirname $OUTFILE) is invalid"
	[[ -f "$OUTFILE" ]] && dcs "Error: File $OUTFILE already exists"
	[[ -n "$DECRYPT" ]] && decrypt "$DKEYF" "$INFILE" && return
	MESSAGE="$@"
	[[ -z "$MESSAGE" ]] && helpfn && return
	# the message limitation can be fixed with encrypted file concatenation, like base64-encoded lines in one file, or multiple files
	# compressed as a tar or something, or, try concatenating binary files altought I am not quite sure that will work
	[[ ${#MESSAGE} -gt $MAXCHAR ]] && dcs "Error: Max message length is $MAXCHAR"
	encrypt "$DKEYFP" "$OUTFILE" "$MESSAGE"
	[[ -n "$VERBOSE" ]] && echo "$OUTFILE"
}
run "$@"
